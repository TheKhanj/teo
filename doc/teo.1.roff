.TH TEO 1 "February 2025" "1.0" "Teo CCTV CLI Tool"

.SH NAME
teo \- A CLI tool for configuring and recording CCTV camera streams.

.SH DESCRIPTION
.B teo
is a command-line utility for managing CCTV recordings. Most users only need to configure it once using a JSON configuration file and start the systemd target. However, for those who need more control, direct recording and cleanup commands are available.

teo is named after my beloved dog Teo üê∂ü§ç

.SH COMMANDS

.SS teo configure
Configure `teo` using a JSON file.

.TP
.B \-c | --config <file>
Specify the configuration file.

This command sets up `teo.target`, a systemd service that manages recordings, but does not enable it for auto-start.
To manually start or enable it on boot, use:

.nf
systemctl start teo.target
systemctl enable --now teo.target
.fi

In addition to `teo.target`, there are `teo-record-{cam-name}.service` units for each configured camera. `teo.target` depends on these services and starts them when it starts up. Users can also manually control individual camera recording services if needed:

.nf
systemctl start teo-record-cam1.service
systemctl stop teo-record-cam2.service
systemctl restart teo-record-cam3.service
.fi

A JSON schema is available for autocompletion and validation:
https://raw.githubusercontent.com/TheKhanj/teo/refs/heads/master/config.schema.json

.SS teo record
Manually start recording from a camera stream.
This is useful if the usual configuration does not fit specific needs, and you want to handle the recording process directly.

.TP
.B \-c | --camera <name>
Name of the camera.

.TP
.B \-u | --url <stream-url>
RTSP stream URL, e.g.,
rtsp://user:pass@ip:port/path

.TP
.B \-d | --directory <path>
Directory where recordings will be saved.

.TP
.B Recording File Structure
Recorded video segments are saved in the following structure:

.nf
{record-directory}/{camera-name}/YYYY-MM-DD/HH/HH:MM:SS-seg-NNN.mkv
.fi

.IP \(bu 2
Each recording hour is split into \fB5-minute segments\fP.
.IP \(bu 2
The first segment of an hour is numbered `000`, the second is `001`, and so on.
.IP \(bu 2
After recording for \fB1 hour\fP, the process moves to a new folder corresponding to the next hour and starts segment numbering again from `000`.

Example:
If the time is \fB13:23\fP, when `teo record` starts with the required parameters, it creates:

.nf
{record-directory}/{camera-name}/YYYY-MM-DD/13/13:23:00-seg-000.mkv
.fi

It continues recording 5-minute segments:

.nf
{record-directory}/{camera-name}/YYYY-MM-DD/13/13:28:00-seg-001.mkv
{record-directory}/{camera-name}/YYYY-MM-DD/13/13:33:00-seg-002.mkv
...
.fi

After \fBone hour (14:23)\fP, it moves to the next directory and starts fresh:

.nf
{record-directory}/{camera-name}/YYYY-MM-DD/14/14:23:00-seg-000.mkv
.fi

This process continues indefinitely.

.SS teo cleanup
Clean up old recordings to prevent the storage from filling up.

.TP
.B Note:
This feature is \fBnot yet implemented\fP.

.SH GLOBAL OPTIONS

.TP
.B \-h
Show a short usage guide.

.TP
.B --help
Display the full manual.

.TP
.B --version
Show the current version of `teo`.

.SH EXAMPLES

.TP
Configure `teo` with a JSON file:
.nf
teo configure -c config.json
.fi

.TP
Start recording a camera manually:
.nf
teo record -c cam1 -u rtsp://example.com/stream -d /var/cctv/cam1
.fi

.TP
Enable and start systemd target:
.nf
systemctl enable --now teo.target
.fi

.TP
Manually start or stop a specific camera service:
.nf
systemctl start teo-record-cam1.service
systemctl stop teo-record-cam2.service
.fi

.TP
Run cleanup manually:
.nf
teo cleanup
.fi
